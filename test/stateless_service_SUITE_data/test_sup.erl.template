%%%-------------------------------------------------------------------
%%% @author Maxim Fedorov <maximfca@gmail.com>
%%% @doc
%%% Replacement for spg application top-level supervisor, used for
%%%  testing inside Docker container.
%%% @end
-module(spg_sup).

-behaviour(supervisor).

%% API
-export([start_link/0]).

%% Supervisor callbacks
-export([init/1]).

%% Publishing callback
-export([publish/2]).

%%%-------------------------------------------------------------------
%% API functions

start_link() ->
    supervisor:start_link({local, ?MODULE}, ?MODULE, []).

%%%-------------------------------------------------------------------
%% Supervisor callbacks

init([]) ->
    Children =
        case string:split(atom_to_list(node()), "@") of
            [_, "control"] ->
                % we're the control node
                % control service
                Pid = proc_lib:spawn_link(fun control_service/0),
                register(control_proc, Pid),
                [
                    % publisher for the control service
                    #{
                        id => publisher,
                        start => {?MODULE, publish, [control, control_proc]}
                    }
                ];
            _ ->
                % This provides 'control' service discovery - we're service node
                [
                    #{
                        id => control_service,
                        start => {stateless_service, start_link, [spg, control, 1]}
                    },

                    % Publish 'smoke' service (happens to be spg process)
                    #{
                        id => publisher,
                        start => {?MODULE, publish, [smoke, spg]}
                    }
                ]
        end,

    {ok, {
        #{strategy => one_for_one, intensity => 10, period => 60},
        [
            % This start spg
            #{id => spg,
                start => {spg, start_link, [spg]},
                restart => transient,
                shutdown => 1000,
                modules => [spg]
            } | Children
        ]}}.

%% Control service
control_service() ->
    receive
    after infinity ->
        timeout
    end.

%% Testing callback
publish(Group, Name) ->
    ok = spg:join(Group, whereis(Name)),
    ignore.
